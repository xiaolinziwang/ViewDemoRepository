http://blog.csdn.net/yanbober/article/details/45887547
默认情况下：
10-26 00:43:23.335 31350-31350/com.zhugefang.viewdemo I/test: TestButton--dispatchTouchEvent--action=0
10-26 00:43:23.336 31350-31350/com.zhugefang.viewdemo I/test: OnTouchListener--onTouch-- action=0 --com.zhugefang.viewdemo.Third.widget.TextButton{3ee260e0 VFED..C. ........ 0,0-1080,132 #7f0b0058 app:id/btn}
10-26 00:43:23.336 31350-31350/com.zhugefang.viewdemo I/test: TestButton--onTouchEvent--action=0
10-26 00:43:23.438 31350-31350/com.zhugefang.viewdemo I/test: TestButton--dispatchTouchEvent--action=1
10-26 00:43:23.438 31350-31350/com.zhugefang.viewdemo I/test: OnTouchListener--onTouch-- action=1 --com.zhugefang.viewdemo.Third.widget.TextButton{3ee260e0 VFED..C. ...P.... 0,0-1080,132 #7f0b0058 app:id/btn}
10-26 00:43:23.438 31350-31350/com.zhugefang.viewdemo I/test: TestButton--onTouchEvent--action=1
10-26 00:43:23.440 31350-31350/com.zhugefang.viewdemo I/test: OnClickListener--onClick--com.zhugefang.viewdemo.Third.widget.TextButton{3ee260e0 VFED..C. ...P.... 0,0-1080,132 #7f0b0058 app:id/btn}
总结：
触摸屏幕，会触发dispatchTouchEvent（）---》onTouch()---->onTouchEvent()--onClick()
为啥全是TextButton的呢？
 View类中的：
    public boolean dispatchTouchEvent(MotionEvent event) {
          if (li != null && li.mOnTouchListener != null
                               && (mViewFlags & ENABLED_MASK) == ENABLED
                               && li.mOnTouchListener.onTouch(this, event)) {
                           result = true;
                       }
                       if (!result && onTouchEvent(event)) {
                                       result = true;
                                   }
    }
答：
  @Override
    public boolean onTouch(View v, MotionEvent event) {
        Log.i("test", "OnTouchListener--onTouch-- action=" + event.getAction() + " --" + v);
        return false;
    }
    执行到onTouch():继承的时候，默认返回了false；接着走到了onTouchEvent()中：只要是可点击的，执行完Action_up\action_donw...,
    其中action_up,会执行onclick(),最后一定返回true,也就是说onTouchEvent，返回了true,也就意味着dispatchTouchEvent()返回了true!!!!
    MotionEvent的一系列动作都是被这个TextButton消费了，所以，根本不会进入父布局
     if (((viewFlags & CLICKABLE) == CLICKABLE ||
                    (viewFlags & LONG_CLICKABLE) == LONG_CLICKABLE) ||
                    (viewFlags & CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE) {
                    return true;}

TextButton类中：
onTouchEvent----直接return true，而不调用super.xxxx();;会导致onClick()不会走
10-26 01:06:33.812 1506-1506/com.zhugefang.viewdemo I/test: TestButton--dispatchTouchEvent--action=0
10-26 01:06:33.812 1506-1506/com.zhugefang.viewdemo I/test: OnTouchListener--onTouch-- action=0 --com.zhugefang.viewdemo.Third.widget.TextButton{3ee260e0 VFED..C. ........ 0,0-1080,132 #7f0b0058 app:id/btn}
10-26 01:06:33.813 1506-1506/com.zhugefang.viewdemo I/test: TestButton--onTouchEvent--action=0
10-26 01:06:33.954 1506-1506/com.zhugefang.viewdemo I/test: TestButton--dispatchTouchEvent--action=1
10-26 01:06:33.954 1506-1506/com.zhugefang.viewdemo I/test: OnTouchListener--onTouch-- action=1 --com.zhugefang.viewdemo.Third.widget.TextButton{3ee260e0 VFED..C. ........ 0,0-1080,132 #7f0b0058 app:id/btn}
10-26 01:06:33.954 1506-1506/com.zhugefang.viewdemo I/test: TestButton--onTouchEvent--action=1

TestButton类的onTouchEvent----直接返回false,即onDispatchTouchEvent()也返回false,action_up或者action_down,他们分别作为一次事件，必须
被进行处理了，才执行下一个action；
你会发现如果onTouchEvent返回false（也即dispatchTouchEvent一旦返回false将不再继续派发其他action，立即停止派发）；
10-26 01:18:32.520 20331-20331/com.zhugefang.viewdemo I/test: TestButton--dispatchTouchEvent--action=0
10-26 01:18:32.521 20331-20331/com.zhugefang.viewdemo I/test: OnTouchListener--onTouch-- action=0 --com.zhugefang.viewdemo.Third.widget.TextButton{3ee260e0 VFED..C. ........ 0,0-1080,132 #7f0b0058 app:id/btn}
10-26 01:18:32.521 20331-20331/com.zhugefang.viewdemo I/test: TestButton--onTouchEvent--action=0
10-26 01:18:32.522 20331-20331/com.zhugefang.viewdemo I/test: OnTouchListener--onTouch-- action=0 --android.widget.RelativeLayout{1c957ee3 V.E...C. .......D 0,0-1080,1700 #7f0b0057 app:id/layout}
10-26 01:18:32.606 20331-20331/com.zhugefang.viewdemo I/test: OnTouchListener--onTouch-- action=1 --android.widget.RelativeLayout{1c957ee3 V.E...C. ...P.... 0,0-1080,1700 #7f0b0057 app:id/layout}

情况5:textButton类中
dispatchTouchEvent(MotionEvent event) {
return true;}意味着，当前消耗，setOnTouchListener()\setOnClickLisener都没有用
10-26 01:21:20.853 25295-25295/com.zhugefang.viewdemo I/test: TestButton--dispatchTouchEvent--action=0
10-26 01:21:20.892 25295-25295/com.zhugefang.viewdemo I/test: TestButton--dispatchTouchEvent--action=1

情况6：将TestButton类的dispatchTouchEvent方法修改如下，其他和基础代码保持不变：

        @Override
        public boolean dispatchTouchEvent(MotionEvent event) {
            Log.i(null, "dispatchTouchEvent-- action=" + event.getAction());
            super.dispatchTouchEvent(event);
            return true;
        }
答：所有事件正常派发，TestButton处理所有事件
10-26 01:27:19.073 2336-2336/com.zhugefang.viewdemo I/test: TestButton--dispatchTouchEvent--action=0
10-26 01:27:19.074 2336-2336/com.zhugefang.viewdemo I/test: OnTouchListener--onTouch-- action=0 --com.zhugefang.viewdemo.Third.widget.TextButton{3ee260e0 VFED..C. ........ 0,0-1080,132 #7f0b0058 app:id/btn}
10-26 01:27:19.074 2336-2336/com.zhugefang.viewdemo I/test: TestButton--onTouchEvent--action=0
10-26 01:27:19.159 2336-2373/com.zhugefang.viewdemo D/OpenGLRenderer: DisplayEventReceiver 0x7f97735040 latestVsyncEvent 7824894103523
10-26 01:27:19.167 2336-2336/com.zhugefang.viewdemo I/test: TestButton--dispatchTouchEvent--action=1
10-26 01:27:19.167 2336-2336/com.zhugefang.viewdemo I/test: OnTouchListener--onTouch-- action=1 --com.zhugefang.viewdemo.Third.widget.TextButton{3ee260e0 VFED..C. ...P.... 0,0-1080,132 #7f0b0058 app:id/btn}
10-26 01:27:19.167 2336-2336/com.zhugefang.viewdemo I/test: TestButton--onTouchEvent--action=1
10-26 01:27:19.169 2336-2336/com.zhugefang.viewdemo I/test: OnClickListener--onClick--com.zhugefang.viewdemo.Third.widget.TextButton{3ee260e0 VFED..C. ...P.... 0,0-1080,132 #7f0b0058 app:id/btn}

以上例子总结：
1、dispatchTouchEvent事件派发是传递的，如果返回false,停止下次事件派发，如果是true,继续派发下一次事件
比如，如果当前事件是down,返回了false,则当前view不会再解释action_move\action_up等等事件，并且这一次down事件需要父容器处理掉，才
开始下一个事件move/up的派发

综合得出Android View的触摸屏事件传递机制有如下特征：
1、手指触摸控件(View)首先触发dispatchTouchEvent(MotionEvent)事件
2、在dispatchTouchEvent(MotionEvent)方法中：
onTouch()(执行到这步，需要条件)---->onTouchEvent(MotionEvent)(这一步也是需要条件的),该方法中在Action_up时，
会调用onClickListener(View view)
3、如果控件（View）的onTouch返回false或者mOnTouchListener为null（控件没有设置setOnTouchListener方法）或者控件不是enable的情况下会调运onTouchEvent，dispatchTouchEvent返回值与onTouchEvent返回一样。
5、如果控件不是enable的设置了onTouch方法也不会执行，只能通过重写控件的onTouchEvent方法处理（上面已经处理分析了），dispatchTouchEvent返回值与onTouchEvent返回一样。
如果控件（View）是enable且onTouch返回true情况下，dispatchTouchEvent直接返回true，不会调用onTouchEvent方法。
6、当dispatchTouchEvent在进行事件分发的时候，只有前一个action返回true，才会触发下一个action（也就是说dispatchTouchEvent返回true才会进行下一次action派发）。